//
// Web route(s)
// handling web pages rendering
//

const express = require('express')
const router = express.Router()

const { getTables, getTable } = require('../storage.js')
const { getClient } = require('../client.js')

const ShortUniqueId = require('short-unique-id');

// Index 
router.get("/", async (req, res) => {
    res.render("index");
});

// Cash Register 
router.get("/cashregister", async (req, res) => {
    res.render("cashregister", {
        title: "Adyen Admin Panel",
        data: getTables(),
        poiId: process.env.ADYEN_POS_POI_ID,
        saleId: global.POS_SALE_ID
    })
});

// Success
router.get("/result/success", (req, res) => {
    res.render("result", {
        title: "Adyen Admin Result",
        type: "success",
        msg: "Your request has been successfully processed."
    })
});

// Failure
router.get("/result/:status/:refusalReason", (req, res) => {

    switch (req.params.status) {
        case "failure":
            msg = req.params.refusalReason;
            break;

        default:
            throw new Error("Unexpected status: " + req.params.status)

    }

    res.render("result", {
        title: "Adyen Admin Result",
        type: "failed",
        msg: msg
    })
});

// Get transaction status 
router.get("/transaction-status/:tableName", async (req, res) => {

    const table = getTable(req.params.tableName);

    try {

        const uid = new ShortUniqueId({ length: 10 });
        const serviceId = uid.rnd(); // unique 1-10 alphanumeric characters  

        const response = await getClient().sync(
            {
                SaleToPOIRequest: {
                    MessageHeader: {
                        ProtocolVersion: "3.0",
                        MessageClass: "Service",
                        MessageCategory: "TransactionStatus",
                        MessageType: "Request",
                        ServiceID: serviceId,
                        SaleID: global.POS_SALE_ID,
                        POIID: process.env.ADYEN_POS_POI_ID
                    },
                    TransactionStatusRequest: {
                        ReceiptReprintFlag: true,
                        DocumentQualifier: [
                            "CashierReceipt",
                            "CustomerReceipt"
                        ],
                        MessageReference: {
                            SaleID: global.POS_SALE_ID,
                            ServiceID: table.paymentStatusDetails.serviceId,  // ServiceID of the original transaction.
                            MessageCategory: "Payment"
                        }
                    }
                }
            });

        console.log(response);

        if (response == null) {
            throw new Error("Empty response");
        }

        if (response?.SaleToPOIResponse?.TransactionStatusResponse == null) {
            throw new Error("Empty TransactionStatusResponse");
        }

        const paymentResponse = response.SaleToPOIResponse.TransactionStatusResponse?.RepeatedMessageResponse?.RepeatedResponseMessageBody?.PaymentResponse;

        res.render("transactionstatus", {
            title: "Adyen Terminal Transaction Status",
            type: "success",
            tableName: table.tableName,
            serviceId: table.paymentStatusDetails.serviceId,
            paymentResponse: paymentResponse,
            saleId: global.POS_SALE_ID
        })

    } catch (err) {
        console.error(`Error: ${err.message}, error code: ${err.errorCode}`);

        res.render("transactionstatus", {
            title: "Adyen Terminal Transaction Status",
            type: "failure",
            tableName: table.tableName,
            errorMessage: err.message,
            poiId: process.env.ADYEN_POS_POI_ID,
            saleId: global.POS_SALE_ID
        })
    }
});

/* ################# end CLIENT SIDE ENDPOINTS ###################### */


module.exports = router;